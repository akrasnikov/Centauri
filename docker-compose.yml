version: "3.3"

services:
  host:
    container_name: host
    # image: akrasnikov/host:1.0
    ports:
      - "8010:8010"
    build:
      context: .
      dockerfile: Host/Dockerfile
    # networks:
    #   - centauri-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8010
      - TZ=Asia/Karachi
    restart: on-failure
    depends_on:
      - prometheus
      - redis             
      
  
  host-integration:
    container_name: host-integration
    # image: akrasnikov/host.integration:1.0
    ports:
      - "8020:8020"
    build:
      context: .
      dockerfile: MockIntegration.Apis/Dockerfile
    # networks:
    #   - centauri-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8020
      - TZ=Asia/Karachi
    restart: on-failure
    depends_on:
      - prometheus
      - redis
      
       

  prometheus:
    image: ubuntu/prometheus
    container_name: orders-prometheus
    ports:
      - "30090:9090"
    # networks:
    #   - centauri-network
    environment:
      - TZ=UTC
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: orders-grafana
    # networks:
    #   - centauri-network
    ports:
      - "30091:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      
  redis:
    container_name: redis
    image: bitnami/redis:5.0.9     
    # networks:
    #   - centauri-network        
    environment:       
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    ports:
      - "6379:6379"
    restart: on-failure

  # jaeger:
  #   container_name: jaeger
  #   image: jaegertracing/all-in-one:latest
  #   env_file:
  #     - .env
  #   ports:
  #     - "5775:5775"
  #     - "6831:6831"
  #     - "6832:6832"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "14250:14250"
  #     - "4317:4317"
  #   restart: on-failure
   
  # elastic:
  #   container_name: elastic
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
  #   env_file:
  #     - .env
  #   ports:
  #     - "9200:9200"
  #   environment:
  #     - bootstrap.memory_lock=true
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
  #     - ELASTIC_USERNAME=$ELASTIC_USERNAME
  #     - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
  #     - xpack.security.enabled=$ELASTIC_SECURITY
  #   restart: on-failure

  # kibana:
  #   container_name: kibana
  #   image: docker.elastic.co/kibana/kibana:7.17.3
  #   depends_on:
  #     - "elastic"
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elastic:9200
  #     - XPACK_MONITORING_ENABLED=true
  #     - XPACK_MONITORING_COLLECTION_ENABLED=true
  #     - XPACK_SECURITY_ENABLED=$ELASTIC_SECURITY
  #     - ELASTICSEARCH_USERNAME=$ELASTIC_USERNAME
  #     - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
  #   restart: on-failure

volumes:
  # centauri-volume:
  #   driver_opts:
  #     type: none
  #     device: /var/centauri
  #     o: bind 
  grafana-storage: {}

# networks:
#   centauri-network:
#     name:  centauri_network